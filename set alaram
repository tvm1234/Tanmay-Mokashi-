#include <time.h>
#include <stdio.h>
#include <gpio.h>

 
#define PIN1 RPI_GPIO_P1_11
#define PIN2 RPI_GPIO_P1_12
#define PIN3 RPI_GPIO_P1_24
#define PIN4 RPI_GPIO_P1_15
#define PIN5 RPI_GPIO_P1_16
#define PIN6 RPI_GPIO_P1_18
#define PIN7 RPI_GPIO_P1_22
#define PIN8 RPI_GPIO_P1_07
 
void sig_handler ( int signo );
void set_pins_output ( void );
void set_all_pin_low ( void );
 
int main()
{
 
if (!ds3231_init())
return 1;
set_pins_output ();
set_all_pin_low ();
 
signal ( SIGALRM, sig_handler );
alarm ( 2 );
 
while ( 1 );  
 
ds3231_close();
return 0;
}
 
void set_all_pin_low ( void )
{
ds3231_gpio_write(PIN1, LOW);
ds3231_gpio_write(PIN2, LOW);
ds3231_gpio_write(PIN3, LOW);
ds3231_gpio_write(PIN4, LOW);
ds3231_gpio_write(PIN5, LOW);
ds3231_gpio_write(PIN6, LOW);
ds3231_gpio_write(PIN7, LOW);
ds3231_gpio_write(PIN8, LOW);
}
 
void set_pins_output ( void )
{
ds3231_gpio_fsel(PIN1, ds3231_GPIO_FSEL_OUTP);
ds3231_gpio_fsel(PIN2, ds3231_GPIO_FSEL_OUTP);
ds3231_gpio_fsel(PIN3, ds3231_GPIO_FSEL_OUTP);
ds3231_gpio_fsel(PIN4, ds3231_GPIO_FSEL_OUTP);
ds3231_gpio_fsel(PIN5, ds3231_GPIO_FSEL_OUTP);
ds3231_gpio_fsel(PIN6, ds3231_GPIO_FSEL_OUTP);
ds3231_gpio_fsel(PIN7, ds3231_GPIO_FSEL_OUTP);
ds3231_gpio_fsel(PIN8, ds3231_GPIO_FSEL_OUTP);
}
 
void sig_handler ( int signo )
{
static int i = 0;
 
set_all_pin_low ();
ds3231_delay( 50 );
 
i ++;
 
switch ( i )
{
case  1:
ds3231_gpio_write(PIN1, HIGH);
break;
case  2:
ds3231_gpio_write(PIN2, HIGH);
break;
case  3:
ds3231_gpio_write(PIN3, HIGH);
break;
case  4:
ds3231_gpio_write(PIN4, HIGH);
break;
case  5:
ds3231_gpio_write(PIN5, HIGH);
break;
case  6:
ds3231_gpio_write(PIN6, HIGH);
break;
case  7:
ds3231_gpio_write(PIN7, HIGH);
break;
case  8:
ds3231_gpio_write(PIN8, HIGH);
i = 0;
break;
};
 
alarm ( 2 );
int file;
  printf ("Starting the DS3231 test application\n");
  if ((file = open ("/dev/i2c-1", O_RDWR)) < 0)
 {
      perror ("failed to open the bus\n");
      return 1;
    }
  if (ioctl (file, I2C_SLAVE, 0x68) < 0)
    {
      perror ("Failed to connect to the sensor\n");
      return 1;
    }
  char writeBuffer[1] = { 0x00 };
  if (write (file, writeBuffer, 1) != 1)
    {
      perror ("Failed to reset the read address\n");
      return 1;
    }
  char buf[BUFFER_SIZE];
  if (read (file, buf, BUFFER_SIZE) != BUFFER_SIZE)
    {
     perror ("Failed to read in the buffer\n");
      return 1;
    }
  printf ("The Alaram set is %02d:%02d:%02d\n", bcdToDec (buf[8]]),
          bcdToDec (buf[9]), bcdToDec (buf[10]));
  close (file);
  return 0;
}
 
